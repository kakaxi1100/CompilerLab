lua
原理
lua是一个解释型语言，它有一个C编写的解释器，用来做语义分析。lua经过词法分析形成分析树后（或编译成中间码），再由解释器一行行解释执行。
所以重写解释器，就能实现lua作为不同语言的扩展。
它是作为一个库来实现宿主语言扩展的。可以把它当成具有逻辑运算功能的配置表
--------------------------------------------------------------------------------------------------
1.程序块
	换行不起任何作用，两条语句可以用;号隔开，可以不隔开，效果是一样的。一下几种写法都是一样并且完全等价!
	a = 1
	b = a*2

	a = 1;
	b = a*2;

	a = 1; b = a*2

	a = 1 b = a*2

2.调试模式

	-i 运行完指定程序后进入调试模式
	-e 可以在-e 后直接输入代码 如：
		lua -e "print(math.sin(12))"
	-l 加载库文件 lua -l 1 (文件为1.lua)

3.词法规范

	大小写敏感

4.语法
	注释：
	单行注释：--
	块注释: --[===[内容--]===] 等号可以为0或者多个，但是必须匹配

5.类型与值
	特殊值 nil 表示空值
	访问一个未初始化的变量，得到的就是 nil
	
	8种基础类型
		nil, boolean, number, string, userdata, function, thread, table
		函数type可以返回值的类型
		print(type("Hello world")) -->string
		print(type(type(X))) -->string
	
	boolean类型
		false 和 nil 视为假， 其余的都视为真，包括空字符串和0也是视为真
	
	number类型
		number可以用16进制表示，其中p或者P 表示的时候 二进制指数
		以下写法都是正确的:
		4 0.4 4.57e-3 0.3e12 5e+20
		0xff --> 255
		0x1A3 -->419
		0x0.2 -->0.125
		0x1p-1 -->0.5
		0xa.bp2 -->42.75	
		
	string类型
		可以用单引号或者双引号来表示字符串，用#来取得字符长度
		a = "a line"
		b = 'anoter line'
		print(#a) -->6
		print(#b) -->11
		
		转义字符
		\a 响铃
		\b 退格
		\f 换页
		\n 换行
		\r 回车
		\t 水平tab
		\v 垂直tab
		\\ 反斜杠
		\" 双引号
		\' 单引号
		
		也可以用数值来转成字母，这个数值最多时有3个十进制组成，\ddd
		'alo\nl23\"'
		可以表示成
		'\97lo\10\04923"'
		a 的 ascii 的编码为 97
		\n 的编码为 10
		l 的编码为 49 但是由于l后面跟的是23也是数字，为了避免解释器解释为492所以前面要加一个0
		另外也可以用16进制来表示
		'\x61\x6c\x6f\x0a\x31\x32\x33\x22'
		
		还可以用一对方括号来自定长的字符串，[===[]===]其中等号可以是0或者多个，但是必须匹配。
		它会忽略第一行的换行，并且不会解释其中的转义序列。
		page = [====[
		<html>
		<head>
			<title></title>
		</head>
			<body>
				<a href="http://www.lua.org">lua</a>
			</body>
		</html>
		]====]
		
		\z 可以用在行末 表示第一行结束，这样在输入字符串的时候，就可以换行输入了。
		data="abcd\z
			efg"
		print(data) -->abcefg
		
		字符串在于数值进行计算的时候，会被强制转化为数字
		print("10 + 1") --> 10 + 1
		print("10"+"1") -->11.0
		print("-5.3e-10"*2) -->-1.06e-009
		print("hello"+1) --> error
		数字也可以用连字符来隐式的转换成字符串，注意 .. 两端有空格，避免被解释成小数点
		print(10 .. 20) -->1020
		
		可以用tonumber(string)将一个字符串显示转成数字，不过转换不成功返回 nil
		可以用tostring(number)将一个数字显示的转成字符串
		
	table类型
		它是一个关联数组，可以通过一个大括号创建它{}
		a = {}
		可以用点和[]来赋值
		a["x"] = 10
		a.x = 10 -->等同于a["x"]
		#a 可以得到table a 的长度
		
6.解释器程序
	命令:
	_PROMPT='命令提示符' 默认的是 >
	
	如果要打印表达式的值，可以用等号开头，并跟随一个表达式如
	>= math.sin(3)
	0.14112000805987
	>a = 30
	>=a
	30

7.表达式
	算术操作符
	+ - * / ^(指数) %(取模) -(负数)
	取模公式
	a%b = a - math.floor(a/b)*b
	X%1 表示X的小数部分 X-X%1 表示X的整数部分
	X%0.01 表示精确到小数点后面两位
	
	关系操作符
	< > <= >= == ~=(不等)
	关系操作符返回的都是boolean类型
	
	逻辑操作符
	and or not
	对于and 第一个操作数为假就返回第一个操作数，否则返回第二个操作数
	对于or  第一个操作数为真就返回第一个操作数，否则返回第二个操作数
	对于not 只返回true或者false
	
	字符串连接
	..
	print("hello" .. "world") -->hello world
	print(0 .. 1) -->01
	
	长度操作符
	#
	可以用于字符串和talbe
	a[#a + 1] = "v";
	#只能表示连续的长度,当碰到nil时，它就认为结束了
	a = {}
	a[1] = 1
	a[2] =nil
	a[3] = 3
	print(#a) -->1
	
	b = {}
	b["x"] = 10
	b["y"] = 20
	print(#b) -->0
	
	优先级
	^
	not # -(一元)
	* / %
	+ -
	..
	< > <= >= ~= ==
	and
	or
	
	除了^ 和 .. 操作符是右结合之外，其他操作符都是左结合。  
	右结合性：意思是从右向左执行运算；例如
	a=b=c，按a=（b=c）运算，
	左结合性：意思是从左向右执行运算；例如
	a+b+c，按（a+b）+c运算
	
	Table 构造式
	table 假如没有指定键值，默认是从 1 开始
	polyline = {color="blue", 3,thickness=2, npoints=4, {x=0, y=0},{x=-10,y=10},{x=9,2}}
	print(polyline[1]) -->3
	print(polyline[3].x) --> -10
	print(polyline[4][1]) --> 2
	
	table 还能用表达式来构造和访问建， 用一个[] 来表示
	opnames = {["-"] = "sub"}
	i = 20
	s = "-"
	a = {[i+2] = s..s..s}
	print(opnames[s]) -->sub
	print(a[22]) --> ---
	
	另外构造式用可以用分号;代替,来分隔不同元素
	{x=10,y=45;"one","two"}

8.语句
	赋值
	多重赋值，将多个值赋予多个变量，每个值和变量之间用逗号分隔。
	先对=号右边所有元素求值，然后再进行赋值。如果变量的个数多于值的个数
	多的变量就是赋值为nil；如果值的个数多于变量的个数，多的值就会被丢掉。
	a, b = 10, 2*x
	
	局部变量和块（作用域）
	局部变量的声明
	local i = 1
	它的作用域有四个地方
	1.函数体内
	2.控制结构体内
	3.一个文件内
	4.同一字串命令。比如在交互模式中，即在交互模式中每一行就是一个块。
	>local i = 1 -->这个代表一个块，作用域就只在这个块中
	>print(i) -->nil
	但是在同一行
	>local i = 1 print(i) --> 1  整个字串代表一个块
	5.do end 之间，可适用于交互模式
	do
		local a = 10
		print(a)
	end
	局部变量多重赋值，其特性和全局变量多重赋值一样，只是需要在最开始加上local 标识
	local a, b = 1, 2
	
9.控制结构
	条件结构
	1.if then else
		if a < 0 then 
			a = 0
		end
		
		if a<0 then 
			return a
		else
			return 0
		end
	
	2.if elseif
		if op == "+" then
			return 1
		elseif op == "-" then
			return -1
		else
			return 0
		end
		
	循环结构
	1.while do
		while i < 10 do
			i++
		end
	
	2.repeat until 注意在repeat中声明的临时变量 依然可以用在条件判断中
		local k = 1
		repeat
			local i = 10
			i = i - k
			k = k + 1
			print(i)
		until i < 0
		
	3.数字型 for
		for var = exp1, exp2, exp3 do
			<...>
		end
		其中exp3可以不写，默认为1，var 会被自动声明为for的局部变量
		for i = 1, f(x), -1 do
			print(i)
		end
	
	4.泛型 for
		for i,v in ipairs(array)
			<...>
		end
		每次循环，i被赋值一个索引，v被赋值该索引的值
		迭代器的种类:
		io.lines 		迭代文件中的每行
		pairs 	 		迭代table元素
		ipairs	 		迭代数组元素
		stirng.gmatch	迭代字符串中的字母
	
	5.break return goto
		break 用来跳出最内层的循环，并继续执行函数
		return 用来结束函数
		break 和 return 只能是一个块的最后一条语句，或者是end，else，until 前一条语句。
		如果要在中间插入return 或 break 可以用do end 来包装
		
		function foo()
			return 		-->不会报错，但是会忽略这个return
			print(2)
		end
		
		function foo()
			do return end --> 正确做法应该用 do end 来包装
			print(2)
		end
		
		goto语句可以跳到一个指定的标签
		标签的定义 ::标签名字::
		限制条件:
		1. goto 不能跳到一个块里面去，因为块中的label对外是不可见的
		2. goto 不能跳出一个function
		3. goto 不能跳入一个局部变量的范围
		例：
		::s1::do
		local c = 1
		print(1)
		end
		goto s1

10.函数
		
		
	
	